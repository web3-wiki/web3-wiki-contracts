{
  "address": "0xa4a9E0C8d35A0C770C792a127D54Bc624c018aa7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voting",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wikipage",
          "type": "address"
        }
      ],
      "name": "WikiPageCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pagename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentURL",
          "type": "string"
        }
      ],
      "name": "createWikiPage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "getAddrByHash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWikiAddr",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "toLowercase",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wikipages",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wikipagesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x90109cb54799abbb3c3a49c1c347a08888fb3cd2a9333d041be7973b4841b40b",
  "receipt": {
    "to": null,
    "from": "0x6eA8D23189aE68F1423c6Fc8f93b602B5C0524A7",
    "contractAddress": "0xa4a9E0C8d35A0C770C792a127D54Bc624c018aa7",
    "transactionIndex": 57,
    "gasUsed": "2616561",
    "logsBloom": "0x
    "blockHash": "0x2032a05b8149073d513173764f616b8b2f691bf64830f16bbd4a43ba87009b53",
    "transactionHash": "0x90109cb54799abbb3c3a49c1c347a08888fb3cd2a9333d041be7973b4841b40b",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 32975834,
        "transactionHash": "0x90109cb54799abbb3c3a49c1c347a08888fb3cd2a9333d041be7973b4841b40b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006ea8d23189ae68f1423c6fc8f93b602b5c0524a7",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001202c33043f64d100000000000000000000000000000000000000000000000128ca22deba2493d3000000000000000000000000000000000000000000001c905ebd9aa5140b24d200000000000000000000000000000000000000000000000127a9f6abb5e52f02000000000000000000000000000000000000000000001c905fddc6d8184a89a3",
        "logIndex": 330,
        "blockHash": "0x2032a05b8149073d513173764f616b8b2f691bf64830f16bbd4a43ba87009b53"
      }
    ],
    "blockNumber": 32975834,
    "cumulativeGasUsed": "16790806",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x62580Cb24be3c19B20e77E92287b47D7af3518c9",
    "0xbd331950e413d10a24bCbC7308B72E9F3F1ce99d"
  ],
  "numDeployments": 1,
  "solcInputHash": "bf028f67671c637339e0cc46c97a7557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voting\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wikipage\",\"type\":\"address\"}],\"name\":\"WikiPageCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pagename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentURL\",\"type\":\"string\"}],\"name\":\"createWikiPage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getAddrByHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWikiAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"toLowercase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wikipages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wikipagesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/WikiFactory.sol\":\"WikiFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/WikiFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"./WikiPage.sol\\\";\\n\\ncontract WikiFactory {\\n    address[] public wikipages;\\n    mapping(address => bool) public isWikiAddr;\\n    mapping(bytes32 => address) public getAddrByHash;\\n\\n    address public baseToken;\\n    address public voting;\\n\\n    constructor(address _token, address _voting) {\\n        baseToken = _token;\\n        voting = _voting;\\n    }\\n\\n    //\\n    event WikiPageCreated(address indexed owner, address wikipage);\\n\\n    function createWikiPage(string memory pagename, string memory contentURL) public returns (address) {\\n        address addr = _createWikiPage(pagename);\\n        IWikiPage(addr).safeMint(msg.sender, contentURL);\\n        return addr;\\n    }\\n\\n    function _createWikiPage(string memory pagename) internal returns (address) {\\n        // pagename = toLowercase(pagename);\\n        bytes32 titlehash = keccak256(abi.encode(address(this), pagename));\\n        if (getAddrByHash[titlehash] != address(0)) {\\n            return getAddrByHash[titlehash];\\n        }\\n        address addr = address(0);\\n        addr = address(new WikiPage{salt: keccak256(abi.encode(address(this), msg.sender))}(pagename, address(this), msg.sender, baseToken));\\n        getAddrByHash[titlehash] = addr;\\n        wikipages.push(addr);\\n        isWikiAddr[addr] = true;\\n        emit WikiPageCreated(msg.sender, addr);\\n        return (addr);\\n    }\\n\\n    function wikipagesLength() public view returns (uint256) {\\n        return wikipages.length;\\n    }\\n\\n    // //\\n    // function toUppercase(string memory str) public pure returns (string memory) {\\n    //     bytes memory bStr = bytes(str);\\n    //     bytes memory bUpper = new bytes(bStr.length);\\n    //     uint8 num = 0;\\n    //     for (uint256 i = 0; i < bStr.length; i++) {\\n    //         // Lowercase character...\\n    //         if ((uint8(bStr[i]) >= 97) && (uint8(bStr[i]) <= 122)) {\\n    //             // So we subtract 32 to make it uppercase\\n    //             bUpper[i] = bytes1(uint8(bStr[i]) - 32);\\n    //         } else {\\n    //             bUpper[i] = bStr[i];\\n    //         }\\n\\n    //         if (\\n    //             ((uint8(bUpper[i]) >= 65) && (uint8(bUpper[i]) <= 90)) || ((uint8(bUpper[i]) >= 30) && (uint8(bUpper[i]) <= 39)) // A-Z // 0-9\\n    //         ) {\\n    //             num++;\\n    //         }\\n    //     }\\n    //     require(num > 0, \\\"symbol must be A-Z0-9\\\");\\n    //     bytes memory bSymbol = new bytes(num);\\n    //     uint256 j = 0;\\n    //     for (uint256 i = 0; i < bUpper.length; i++) {\\n    //         if (\\n    //             ((uint8(bUpper[i]) >= 65) && (uint8(bUpper[i]) <= 90)) || ((uint8(bUpper[i]) >= 30) && (uint8(bUpper[i]) <= 39)) // A-Z // 0-9\\n    //         ) {\\n    //             bSymbol[j++] = bUpper[i];\\n    //         }\\n    //     }\\n\\n    //     // return string(bUpper);\\n    //     return string(bSymbol);\\n    // }\\n\\n    //\\n    function toLowercase(string memory str) public pure returns (string memory) {\\n        bytes memory bStr = bytes(str);\\n        bytes memory bUpper = new bytes(bStr.length);\\n        uint8 num = 0;\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n                // So we add 32 to make it lowercase\\n                bUpper[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bUpper[i] = bStr[i];\\n            }\\n\\n            if (\\n                ((uint8(bUpper[i]) >= 97) && (uint8(bUpper[i]) <= 122)) || ((uint8(bUpper[i]) >= 30) && (uint8(bUpper[i]) <= 39)) // a-z // 0-9\\n            ) {\\n                num++;\\n            }\\n        }\\n        require(num > 0, \\\"must be a-z0-9\\\");\\n        bytes memory bSymbol = new bytes(num);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < bUpper.length; i++) {\\n            if (\\n                ((uint8(bUpper[i]) >= 65) && (uint8(bUpper[i]) <= 90)) || ((uint8(bUpper[i]) >= 30) && (uint8(bUpper[i]) <= 39)) // A-Z // 0-9\\n            ) {\\n                bSymbol[j++] = bUpper[i];\\n            }\\n        }\\n\\n        // return string(bUpper);\\n        return string(bSymbol);\\n    }\\n}\\n\",\"keccak256\":\"0xc39a6e372a2fef9a1f8d63cafcbf5424d63906e720cfb23089775c530d7eb434\",\"license\":\"MIT\"},\"src/WikiPage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n// import \\\"./WikiRevision.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IWikiPage {\\n    function pagename() external view returns (string memory);\\n\\n    function baseToken() external view returns (address);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function safeMint(address to, string memory contentURL) external;\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function deposit(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\\ncontract WikiPage is ERC721, ERC721URIStorage, ERC721Burnable, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    Counters.Counter private _tokenIdCounter;\\n    using Counters for Counters.Counter;\\n    address public facotry;\\n    address public founder;\\n    address public baseToken;\\n    string public pagename;\\n\\n    // // Info of each user.\\n    // struct UserInfo {\\n    //     uint256 amount;\\n    //     // uint256 rewardDebt;\\n    // }\\n    // mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    mapping(uint256 => mapping(address => uint256)) public userAmount;\\n\\n    // /// Info of each pool.\\n    // struct PoolInfo {\\n    //     uint128 accRewardPerShare;\\n    //     uint64 lastRewardTimestamp;\\n    //     uint64 allocPoint;\\n    // }\\n\\n    constructor(\\n        string memory _pagename,\\n        address _facotry,\\n        address _founder,\\n        address _baseToken\\n    ) ERC721(\\\"WIKI\\\", \\\"WIKINFT\\\") {\\n        pagename = _pagename;\\n        facotry = _facotry;\\n        founder = _founder;\\n        baseToken = _baseToken;\\n    }\\n\\n    // function _baseURI() internal pure override returns (string memory) {\\n    //     return \\\"\\\";\\n    // }\\n\\n    function safeMint(address to, string memory uri) public {\\n        require(facotry == msg.sender, \\\"factory\\\");\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    function deposit(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        // UserInfo storage user = userInfo[_tokenId][_to];\\n        uint256 ua = userAmount[_tokenId][_to];\\n        IERC20(baseToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        // user.amount += _amount;\\n        userAmount[_tokenId][_to] = ua + _amount;\\n        // emit Deposit( _tokenId, _amount, _to);\\n    }\\n\\n    function withdraw(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        // UserInfo storage user = userInfo[_tokenId][msg.sender];\\n        // require(user.amount >= _amount, \\\"withdraw: amount\\\");\\n        uint256 ua = userAmount[_tokenId][msg.sender];\\n        require(ua >= _amount, \\\"withdraw: amount\\\");\\n\\n        // user.amount -= _amount;\\n        userAmount[_tokenId][msg.sender] = ua - _amount;\\n        IERC20(baseToken).safeTransfer(_to, _amount);\\n\\n        // emit Withdraw(msg.sender, _tokenId, _amount, _to);\\n    }\\n\\n    // event Deposit(address indexed user, uint256 indexed tokenId, uint256 amount, address indexed to);\\n\\n    // event Withdraw(address indexed user, uint256 indexed tokenId, uint256 amount, address indexed to);\\n\\n    //\\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x8b3c4625898e9dd0fa9d0141c957a0bb4e8c8049285e3bdc4887e7d10ff16dcf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612e4c380380612e4c83398101604081905261002f9161007c565b600380546001600160a01b039384166001600160a01b031991821617909155600480549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b612d8e806100be6000396000f3fe60806040523480156200001157600080fd5b5060043610620000935760003560e01c806390b0acf1116200006257806390b0acf11462000140578063c55dae631462000152578063e0b45f001462000166578063fce1ccca146200019257600080fd5b80631dae05341462000098578063262e3c8214620000cc57806342e8a5fd14620000e357806350bb0884146200011a575b600080fd5b620000af620000a9366004620008a7565b620001a6565b6040516001600160a01b0390911681526020015b60405180910390f35b620000af620000dd36600462000912565b62000223565b62000109620000f43660046200092c565b60016020526000908152604090205460ff1681565b6040519015158152602001620000c3565b620001316200012b3660046200095e565b6200024e565b604051620000c39190620009ef565b600054604051908152602001620000c3565b600354620000af906001600160a01b031681565b620000af6200017736600462000912565b6002602052600090815260409020546001600160a01b031681565b600454620000af906001600160a01b031681565b600080620001b48462000645565b604051636902622f60e11b81529091506001600160a01b0382169063d204c45e90620001e7903390879060040162000a04565b600060405180830381600087803b1580156200020257600080fd5b505af115801562000217573d6000803e3d6000fd5b50929695505050505050565b600081815481106200023457600080fd5b6000918252602090912001546001600160a01b0316905081565b606060008290506000815167ffffffffffffffff811115620002745762000274620007fc565b6040519080825280601f01601f1916602001820160405280156200029f576020820181803683370190505b5090506000805b83518110156200047c576041848281518110620002c757620002c762000a2a565b016020015160f81c10801590620002fb5750605a848281518110620002f057620002f062000a2a565b016020015160f81c11155b15620003675783818151811062000316576200031662000a2a565b602001015160f81c60f81b60f81c602062000332919062000a56565b60f81b8382815181106200034a576200034a62000a2a565b60200101906001600160f81b031916908160001a905350620003b4565b8381815181106200037c576200037c62000a2a565b602001015160f81c60f81b8382815181106200039c576200039c62000a2a565b60200101906001600160f81b031916908160001a9053505b6061838281518110620003cb57620003cb62000a2a565b016020015160f81c10801590620003ff5750607a838281518110620003f457620003f462000a2a565b016020015160f81c11155b80620004515750601e8382815181106200041d576200041d62000a2a565b016020015160f81c10801590620004515750602783828151811062000446576200044662000a2a565b016020015160f81c11155b15620004675781620004638162000a7e565b9250505b80620004738162000aa0565b915050620002a6565b5060008160ff1611620004c65760405162461bcd60e51b815260206004820152600e60248201526d6d75737420626520612d7a302d3960901b604482015260640160405180910390fd5b60008160ff1667ffffffffffffffff811115620004e757620004e7620007fc565b6040519080825280601f01601f19166020018201604052801562000512576020820181803683370190505b5090506000805b8451811015620006395760418582815181106200053a576200053a62000a2a565b016020015160f81c108015906200056e5750605a85828151811062000563576200056362000a2a565b016020015160f81c11155b80620005c05750601e8582815181106200058c576200058c62000a2a565b016020015160f81c10801590620005c057506027858281518110620005b557620005b562000a2a565b016020015160f81c11155b156200062457848181518110620005db57620005db62000a2a565b01602001516001600160f81b0319168383620005f78162000aa0565b9450815181106200060c576200060c62000a2a565b60200101906001600160f81b031916908160001a9053505b80620006308162000aa0565b91505062000519565b50909695505050505050565b60008030836040516020016200065d92919062000a04565b60408051601f198184030181529181528151602092830120600081815260029093529120549091506001600160a01b031615620006b2576000908152600260205260409020546001600160a01b031692915050565b60408051306020820152339181019190915260009060600160405160208183030381529060405280519060200120843033600360009054906101000a90046001600160a01b03166040516200070790620007ee565b62000716949392919062000abc565b8190604051809103906000f590508015801562000737573d6000803e3d6000fd5b50600083815260026020908152604080832080546001600160a01b0386166001600160a01b031991821681179092558454600181810187557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091018054909216831790915581855280845293829020805460ff19169094179093555191825291925033917f80ec459c5cf05e564a45210151ad4b1c790b68a84a079a6220e6ba737921dd79910160405180910390a29392505050565b61225e8062000afb83390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200082457600080fd5b813567ffffffffffffffff80821115620008425762000842620007fc565b604051601f8301601f19908116603f011681019082821181831017156200086d576200086d620007fc565b816040528381528660208588010111156200088757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215620008bb57600080fd5b823567ffffffffffffffff80821115620008d457600080fd5b620008e28683870162000812565b93506020850135915080821115620008f957600080fd5b50620009088582860162000812565b9150509250929050565b6000602082840312156200092557600080fd5b5035919050565b6000602082840312156200093f57600080fd5b81356001600160a01b03811681146200095757600080fd5b9392505050565b6000602082840312156200097157600080fd5b813567ffffffffffffffff8111156200098957600080fd5b620009978482850162000812565b949350505050565b6000815180845260005b81811015620009c757602081850181015186830182015201620009a9565b81811115620009da576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006200095760208301846200099f565b6001600160a01b038316815260406020820181905260009062000997908301846200099f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff0382111562000a765762000a7662000a40565b019392505050565b600060ff821660ff810362000a975762000a9762000a40565b60010192915050565b60006001820162000ab55762000ab562000a40565b5060010190565b60808152600062000ad160808301876200099f565b6001600160a01b039586166020840152938516604083015250921660609092019190915291905056fe60806040523480156200001157600080fd5b506040516200225e3803806200225e83398101604081905262000034916200023b565b604080518082018252600481526357494b4960e01b60208083019182528351808501909452600784526615d252d253919560ca1b9084015281519192916200007f9160009162000162565b5080516200009590600190602084019062000162565b505050620000b2620000ac6200010c60201b60201c565b62000110565b8351620000c790600c90602087019062000162565b50600980546001600160a01b039485166001600160a01b031991821617909155600a805493851693821693909317909255600b8054919093169116179055506200038d565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001709062000351565b90600052602060002090601f016020900481019282620001945760008555620001df565b82601f10620001af57805160ff1916838001178555620001df565b82800160010185558215620001df579182015b82811115620001df578251825591602001919060010190620001c2565b50620001ed929150620001f1565b5090565b5b80821115620001ed5760008155600101620001f2565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023657600080fd5b919050565b600080600080608085870312156200025257600080fd5b84516001600160401b03808211156200026a57600080fd5b818701915087601f8301126200027f57600080fd5b81518181111562000294576200029462000208565b604051601f8201601f19908116603f01168101908382118183101715620002bf57620002bf62000208565b81604052828152602093508a84848701011115620002dc57600080fd5b600091505b82821015620003005784820184015181830185015290830190620002e1565b82821115620003125760008484830101525b9750620003249150508782016200021e565b9450505062000336604086016200021e565b915062000346606086016200021e565b905092959194509250565b600181811c908216806200036657607f821691505b6020821081036200038757634e487b7160e01b600052602260045260246000fd5b50919050565b611ec1806200039d6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063b8d151ee11610097578063d204c45e11610071578063d204c45e1461033b578063e985e9c51461034e578063f2fde38b1461038a578063f686c30b1461039d57600080fd5b8063b8d151ee1461030d578063c55dae6314610315578063c87b56dd1461032857600080fd5b8063715018a6146102b35780638da5cb5b146102bb5780638dbdbe6d146102cc57806395d89b41146102df578063a22cb465146102e7578063b88d4fde146102fa57600080fd5b80633f180538116101305780633f1805381461021b57806342842e0e1461025457806342966c68146102675780634d853ee51461027a5780636352211e1461028d57806370a08231146102a057600080fd5b806301ffc9a71461017857806306fdde03146101a0578063081812fc146101b5578063095ea7b3146101e05780630ad58d2f146101f557806323b872dd14610208575b600080fd5b61018b6101863660046118c5565b6103b0565b60405190151581526020015b60405180910390f35b6101a8610402565b604051610197919061193a565b6101c86101c336600461194d565b610494565b6040516001600160a01b039091168152602001610197565b6101f36101ee366004611982565b6104bb565b005b6101f36102033660046119ac565b6105d5565b6101f36102163660046119e1565b610673565b610246610229366004611a1d565b600d60209081526000928352604080842090915290825290205481565b604051908152602001610197565b6101f36102623660046119e1565b6106a5565b6101f361027536600461194d565b6106c0565b600a546101c8906001600160a01b031681565b6101c861029b36600461194d565b6106f1565b6102466102ae366004611a49565b610751565b6101f36107d7565b6007546001600160a01b03166101c8565b6101f36102da3660046119ac565b6107eb565b6101a8610855565b6101f36102f5366004611a72565b610864565b6101f3610308366004611b35565b610873565b6101a86108a5565b600b546101c8906001600160a01b031681565b6101a861033636600461194d565b610933565b6101f3610349366004611bb1565b61093e565b61018b61035c366004611c13565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101f3610398366004611a49565b6109b1565b6009546101c8906001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b14806103e157506001600160e01b03198216635b5e139f60e01b145b806103fc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461041190611c3d565b80601f016020809104026020016040519081016040528092919081815260200182805461043d90611c3d565b801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b5050505050905090565b600061049f82610a27565b506000908152600460205260409020546001600160a01b031690565b60006104c6826106f1565b9050806001600160a01b0316836001600160a01b0316036105385760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105545750610554813361035c565b6105c65760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161052f565b6105d08383610a86565b505050565b6000838152600d60209081526040808320338452909152902054828110156106325760405162461bcd60e51b815260206004820152601060248201526f1dda5d1a191c985dce88185b5bdd5b9d60821b604482015260640161052f565b61063c8382611c8d565b6000858152600d60209081526040808320338452909152902055600b5461066d906001600160a01b03168385610af4565b50505050565b61067e335b82610b57565b61069a5760405162461bcd60e51b815260040161052f90611ca4565b6105d0838383610bd6565b6105d083838360405180602001604052806000815250610873565b6106c933610678565b6106e55760405162461bcd60e51b815260040161052f90611ca4565b6106ee81610d72565b50565b6000818152600260205260408120546001600160a01b0316806103fc5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161052f565b60006001600160a01b0382166107bb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161052f565b506001600160a01b031660009081526003602052604090205490565b6107df610d7b565b6107e96000610dd5565b565b6000838152600d602090815260408083206001600160a01b038086168552925290912054600b5490916108219116333086610e27565b61082b8382611cf2565b6000948552600d602090815260408087206001600160a01b03909516875293905291909320555050565b60606001805461041190611c3d565b61086f338383610e5f565b5050565b61087d3383610b57565b6108995760405162461bcd60e51b815260040161052f90611ca4565b61066d84848484610f2d565b600c80546108b290611c3d565b80601f01602080910402602001604051908101604052809291908181526020018280546108de90611c3d565b801561092b5780601f106109005761010080835404028352916020019161092b565b820191906000526020600020905b81548152906001019060200180831161090e57829003601f168201915b505050505081565b60606103fc82610f60565b6009546001600160a01b031633146109825760405162461bcd60e51b8152602060048201526007602482015266666163746f727960c81b604482015260640161052f565b600061098d60085490565b905061099d600880546001019055565b6109a78382611068565b6105d081836111aa565b6109b9610d7b565b6001600160a01b038116610a1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052f565b6106ee81610dd5565b6000818152600260205260409020546001600160a01b03166106ee5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161052f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610abb826106f1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6040516001600160a01b0383166024820152604481018290526105d090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611244565b600080610b63836106f1565b9050806001600160a01b0316846001600160a01b03161480610baa57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610bce5750836001600160a01b0316610bc384610494565b6001600160a01b0316145b949350505050565b826001600160a01b0316610be9826106f1565b6001600160a01b031614610c4d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161052f565b6001600160a01b038216610caf5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161052f565b610cba600082610a86565b6001600160a01b0383166000908152600360205260408120805460019290610ce3908490611c8d565b90915550506001600160a01b0382166000908152600360205260408120805460019290610d11908490611cf2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6106ee81611316565b6007546001600160a01b031633146107e95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052f565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261066d9085906323b872dd60e01b90608401610b20565b816001600160a01b0316836001600160a01b031603610ec05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161052f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f38848484610bd6565b610f4484848484611356565b61066d5760405162461bcd60e51b815260040161052f90611d0a565b6060610f6b82610a27565b60008281526006602052604081208054610f8490611c3d565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb090611c3d565b8015610ffd5780601f10610fd257610100808354040283529160200191610ffd565b820191906000526020600020905b815481529060010190602001808311610fe057829003601f168201915b50505050509050600061101b60408051602081019091526000815290565b9050805160000361102d575092915050565b81511561105f578082604051602001611047929190611d5c565b60405160208183030381529060405292505050919050565b610bce84611457565b6001600160a01b0382166110be5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161052f565b6000818152600260205260409020546001600160a01b0316156111235760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161052f565b6001600160a01b038216600090815260036020526040812080546001929061114c908490611cf2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b03166112255760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161052f565b600082815260066020908152604090912082516105d0928401906117e0565b6000611299826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114cb9092919063ffffffff16565b8051909150156105d057808060200190518101906112b79190611d8b565b6105d05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052f565b61131f816114da565b6000818152600660205260409020805461133890611c3d565b1590506106ee5760008181526006602052604081206106ee91611864565b60006001600160a01b0384163b1561144c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061139a903390899088908890600401611da8565b6020604051808303816000875af19250505080156113d5575060408051601f3d908101601f191682019092526113d291810190611de5565b60015b611432573d808015611403576040519150601f19603f3d011682016040523d82523d6000602084013e611408565b606091505b50805160000361142a5760405162461bcd60e51b815260040161052f90611d0a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610bce565b506001949350505050565b606061146282610a27565b600061147960408051602081019091526000815290565b9050600081511161149957604051806020016040528060008152506114c4565b806114a384611575565b6040516020016114b4929190611d5c565b6040516020818303038152906040525b9392505050565b6060610bce8484600085611676565b60006114e5826106f1565b90506114f2600083610a86565b6001600160a01b038116600090815260036020526040812080546001929061151b908490611c8d565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60608160000361159c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156115c657806115b081611e02565b91506115bf9050600a83611e31565b91506115a0565b60008167ffffffffffffffff8111156115e1576115e1611aa9565b6040519080825280601f01601f19166020018201604052801561160b576020820181803683370190505b5090505b8415610bce57611620600183611c8d565b915061162d600a86611e45565b611638906030611cf2565b60f81b81838151811061164d5761164d611e59565b60200101906001600160f81b031916908160001a90535061166f600a86611e31565b945061160f565b6060824710156116d75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161052f565b6001600160a01b0385163b61172e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052f565b600080866001600160a01b0316858760405161174a9190611e6f565b60006040518083038185875af1925050503d8060008114611787576040519150601f19603f3d011682016040523d82523d6000602084013e61178c565b606091505b509150915061179c8282866117a7565b979650505050505050565b606083156117b65750816114c4565b8251156117c65782518084602001fd5b8160405162461bcd60e51b815260040161052f919061193a565b8280546117ec90611c3d565b90600052602060002090601f01602090048101928261180e5760008555611854565b82601f1061182757805160ff1916838001178555611854565b82800160010185558215611854579182015b82811115611854578251825591602001919060010190611839565b5061186092915061189a565b5090565b50805461187090611c3d565b6000825580601f10611880575050565b601f0160209004906000526020600020908101906106ee91905b5b80821115611860576000815560010161189b565b6001600160e01b0319811681146106ee57600080fd5b6000602082840312156118d757600080fd5b81356114c4816118af565b60005b838110156118fd5781810151838201526020016118e5565b8381111561066d5750506000910152565b600081518084526119268160208601602086016118e2565b601f01601f19169290920160200192915050565b6020815260006114c4602083018461190e565b60006020828403121561195f57600080fd5b5035919050565b80356001600160a01b038116811461197d57600080fd5b919050565b6000806040838503121561199557600080fd5b61199e83611966565b946020939093013593505050565b6000806000606084860312156119c157600080fd5b83359250602084013591506119d860408501611966565b90509250925092565b6000806000606084860312156119f657600080fd5b6119ff84611966565b9250611a0d60208501611966565b9150604084013590509250925092565b60008060408385031215611a3057600080fd5b82359150611a4060208401611966565b90509250929050565b600060208284031215611a5b57600080fd5b6114c482611966565b80151581146106ee57600080fd5b60008060408385031215611a8557600080fd5b611a8e83611966565b91506020830135611a9e81611a64565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611ada57611ada611aa9565b604051601f8501601f19908116603f01168101908282118183101715611b0257611b02611aa9565b81604052809350858152868686011115611b1b57600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215611b4b57600080fd5b611b5485611966565b9350611b6260208601611966565b925060408501359150606085013567ffffffffffffffff811115611b8557600080fd5b8501601f81018713611b9657600080fd5b611ba587823560208401611abf565b91505092959194509250565b60008060408385031215611bc457600080fd5b611bcd83611966565b9150602083013567ffffffffffffffff811115611be957600080fd5b8301601f81018513611bfa57600080fd5b611c0985823560208401611abf565b9150509250929050565b60008060408385031215611c2657600080fd5b611c2f83611966565b9150611a4060208401611966565b600181811c90821680611c5157607f821691505b602082108103611c7157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611c9f57611c9f611c77565b500390565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60008219821115611d0557611d05611c77565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611d6e8184602088016118e2565b835190830190611d828183602088016118e2565b01949350505050565b600060208284031215611d9d57600080fd5b81516114c481611a64565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ddb9083018461190e565b9695505050505050565b600060208284031215611df757600080fd5b81516114c4816118af565b600060018201611e1457611e14611c77565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611e4057611e40611e1b565b500490565b600082611e5457611e54611e1b565b500690565b634e487b7160e01b600052603260045260246000fd5b60008251611e818184602087016118e2565b919091019291505056fea264697066735822122077914b8b54e6334ecfb0910da8a42844f91385b0dc14a2214d1ea789b661ba0164736f6c634300080e0033a264697066735822122086164b0bfd1b0f3a0dd267f3a6936444ac85985962640cc245f370504bfe309964736f6c634300080e0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000935760003560e01c806390b0acf1116200006257806390b0acf11462000140578063c55dae631462000152578063e0b45f001462000166578063fce1ccca146200019257600080fd5b80631dae05341462000098578063262e3c8214620000cc57806342e8a5fd14620000e357806350bb0884146200011a575b600080fd5b620000af620000a9366004620008a7565b620001a6565b6040516001600160a01b0390911681526020015b60405180910390f35b620000af620000dd36600462000912565b62000223565b62000109620000f43660046200092c565b60016020526000908152604090205460ff1681565b6040519015158152602001620000c3565b620001316200012b3660046200095e565b6200024e565b604051620000c39190620009ef565b600054604051908152602001620000c3565b600354620000af906001600160a01b031681565b620000af6200017736600462000912565b6002602052600090815260409020546001600160a01b031681565b600454620000af906001600160a01b031681565b600080620001b48462000645565b604051636902622f60e11b81529091506001600160a01b0382169063d204c45e90620001e7903390879060040162000a04565b600060405180830381600087803b1580156200020257600080fd5b505af115801562000217573d6000803e3d6000fd5b50929695505050505050565b600081815481106200023457600080fd5b6000918252602090912001546001600160a01b0316905081565b606060008290506000815167ffffffffffffffff811115620002745762000274620007fc565b6040519080825280601f01601f1916602001820160405280156200029f576020820181803683370190505b5090506000805b83518110156200047c576041848281518110620002c757620002c762000a2a565b016020015160f81c10801590620002fb5750605a848281518110620002f057620002f062000a2a565b016020015160f81c11155b15620003675783818151811062000316576200031662000a2a565b602001015160f81c60f81b60f81c602062000332919062000a56565b60f81b8382815181106200034a576200034a62000a2a565b60200101906001600160f81b031916908160001a905350620003b4565b8381815181106200037c576200037c62000a2a565b602001015160f81c60f81b8382815181106200039c576200039c62000a2a565b60200101906001600160f81b031916908160001a9053505b6061838281518110620003cb57620003cb62000a2a565b016020015160f81c10801590620003ff5750607a838281518110620003f457620003f462000a2a565b016020015160f81c11155b80620004515750601e8382815181106200041d576200041d62000a2a565b016020015160f81c10801590620004515750602783828151811062000446576200044662000a2a565b016020015160f81c11155b15620004675781620004638162000a7e565b9250505b80620004738162000aa0565b915050620002a6565b5060008160ff1611620004c65760405162461bcd60e51b815260206004820152600e60248201526d6d75737420626520612d7a302d3960901b604482015260640160405180910390fd5b60008160ff1667ffffffffffffffff811115620004e757620004e7620007fc565b6040519080825280601f01601f19166020018201604052801562000512576020820181803683370190505b5090506000805b8451811015620006395760418582815181106200053a576200053a62000a2a565b016020015160f81c108015906200056e5750605a85828151811062000563576200056362000a2a565b016020015160f81c11155b80620005c05750601e8582815181106200058c576200058c62000a2a565b016020015160f81c10801590620005c057506027858281518110620005b557620005b562000a2a565b016020015160f81c11155b156200062457848181518110620005db57620005db62000a2a565b01602001516001600160f81b0319168383620005f78162000aa0565b9450815181106200060c576200060c62000a2a565b60200101906001600160f81b031916908160001a9053505b80620006308162000aa0565b91505062000519565b50909695505050505050565b60008030836040516020016200065d92919062000a04565b60408051601f198184030181529181528151602092830120600081815260029093529120549091506001600160a01b031615620006b2576000908152600260205260409020546001600160a01b031692915050565b60408051306020820152339181019190915260009060600160405160208183030381529060405280519060200120843033600360009054906101000a90046001600160a01b03166040516200070790620007ee565b62000716949392919062000abc565b8190604051809103906000f590508015801562000737573d6000803e3d6000fd5b50600083815260026020908152604080832080546001600160a01b0386166001600160a01b031991821681179092558454600181810187557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091018054909216831790915581855280845293829020805460ff19169094179093555191825291925033917f80ec459c5cf05e564a45210151ad4b1c790b68a84a079a6220e6ba737921dd79910160405180910390a29392505050565b61225e8062000afb83390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200082457600080fd5b813567ffffffffffffffff80821115620008425762000842620007fc565b604051601f8301601f19908116603f011681019082821181831017156200086d576200086d620007fc565b816040528381528660208588010111156200088757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215620008bb57600080fd5b823567ffffffffffffffff80821115620008d457600080fd5b620008e28683870162000812565b93506020850135915080821115620008f957600080fd5b50620009088582860162000812565b9150509250929050565b6000602082840312156200092557600080fd5b5035919050565b6000602082840312156200093f57600080fd5b81356001600160a01b03811681146200095757600080fd5b9392505050565b6000602082840312156200097157600080fd5b813567ffffffffffffffff8111156200098957600080fd5b620009978482850162000812565b949350505050565b6000815180845260005b81811015620009c757602081850181015186830182015201620009a9565b81811115620009da576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006200095760208301846200099f565b6001600160a01b038316815260406020820181905260009062000997908301846200099f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff0382111562000a765762000a7662000a40565b019392505050565b600060ff821660ff810362000a975762000a9762000a40565b60010192915050565b60006001820162000ab55762000ab562000a40565b5060010190565b60808152600062000ad160808301876200099f565b6001600160a01b039586166020840152938516604083015250921660609092019190915291905056fe60806040523480156200001157600080fd5b506040516200225e3803806200225e83398101604081905262000034916200023b565b604080518082018252600481526357494b4960e01b60208083019182528351808501909452600784526615d252d253919560ca1b9084015281519192916200007f9160009162000162565b5080516200009590600190602084019062000162565b505050620000b2620000ac6200010c60201b60201c565b62000110565b8351620000c790600c90602087019062000162565b50600980546001600160a01b039485166001600160a01b031991821617909155600a805493851693821693909317909255600b8054919093169116179055506200038d565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001709062000351565b90600052602060002090601f016020900481019282620001945760008555620001df565b82601f10620001af57805160ff1916838001178555620001df565b82800160010185558215620001df579182015b82811115620001df578251825591602001919060010190620001c2565b50620001ed929150620001f1565b5090565b5b80821115620001ed5760008155600101620001f2565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023657600080fd5b919050565b600080600080608085870312156200025257600080fd5b84516001600160401b03808211156200026a57600080fd5b818701915087601f8301126200027f57600080fd5b81518181111562000294576200029462000208565b604051601f8201601f19908116603f01168101908382118183101715620002bf57620002bf62000208565b81604052828152602093508a84848701011115620002dc57600080fd5b600091505b82821015620003005784820184015181830185015290830190620002e1565b82821115620003125760008484830101525b9750620003249150508782016200021e565b9450505062000336604086016200021e565b915062000346606086016200021e565b905092959194509250565b600181811c908216806200036657607f821691505b6020821081036200038757634e487b7160e01b600052602260045260246000fd5b50919050565b611ec1806200039d6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063b8d151ee11610097578063d204c45e11610071578063d204c45e1461033b578063e985e9c51461034e578063f2fde38b1461038a578063f686c30b1461039d57600080fd5b8063b8d151ee1461030d578063c55dae6314610315578063c87b56dd1461032857600080fd5b8063715018a6146102b35780638da5cb5b146102bb5780638dbdbe6d146102cc57806395d89b41146102df578063a22cb465146102e7578063b88d4fde146102fa57600080fd5b80633f180538116101305780633f1805381461021b57806342842e0e1461025457806342966c68146102675780634d853ee51461027a5780636352211e1461028d57806370a08231146102a057600080fd5b806301ffc9a71461017857806306fdde03146101a0578063081812fc146101b5578063095ea7b3146101e05780630ad58d2f146101f557806323b872dd14610208575b600080fd5b61018b6101863660046118c5565b6103b0565b60405190151581526020015b60405180910390f35b6101a8610402565b604051610197919061193a565b6101c86101c336600461194d565b610494565b6040516001600160a01b039091168152602001610197565b6101f36101ee366004611982565b6104bb565b005b6101f36102033660046119ac565b6105d5565b6101f36102163660046119e1565b610673565b610246610229366004611a1d565b600d60209081526000928352604080842090915290825290205481565b604051908152602001610197565b6101f36102623660046119e1565b6106a5565b6101f361027536600461194d565b6106c0565b600a546101c8906001600160a01b031681565b6101c861029b36600461194d565b6106f1565b6102466102ae366004611a49565b610751565b6101f36107d7565b6007546001600160a01b03166101c8565b6101f36102da3660046119ac565b6107eb565b6101a8610855565b6101f36102f5366004611a72565b610864565b6101f3610308366004611b35565b610873565b6101a86108a5565b600b546101c8906001600160a01b031681565b6101a861033636600461194d565b610933565b6101f3610349366004611bb1565b61093e565b61018b61035c366004611c13565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101f3610398366004611a49565b6109b1565b6009546101c8906001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b14806103e157506001600160e01b03198216635b5e139f60e01b145b806103fc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461041190611c3d565b80601f016020809104026020016040519081016040528092919081815260200182805461043d90611c3d565b801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b5050505050905090565b600061049f82610a27565b506000908152600460205260409020546001600160a01b031690565b60006104c6826106f1565b9050806001600160a01b0316836001600160a01b0316036105385760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105545750610554813361035c565b6105c65760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161052f565b6105d08383610a86565b505050565b6000838152600d60209081526040808320338452909152902054828110156106325760405162461bcd60e51b815260206004820152601060248201526f1dda5d1a191c985dce88185b5bdd5b9d60821b604482015260640161052f565b61063c8382611c8d565b6000858152600d60209081526040808320338452909152902055600b5461066d906001600160a01b03168385610af4565b50505050565b61067e335b82610b57565b61069a5760405162461bcd60e51b815260040161052f90611ca4565b6105d0838383610bd6565b6105d083838360405180602001604052806000815250610873565b6106c933610678565b6106e55760405162461bcd60e51b815260040161052f90611ca4565b6106ee81610d72565b50565b6000818152600260205260408120546001600160a01b0316806103fc5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161052f565b60006001600160a01b0382166107bb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161052f565b506001600160a01b031660009081526003602052604090205490565b6107df610d7b565b6107e96000610dd5565b565b6000838152600d602090815260408083206001600160a01b038086168552925290912054600b5490916108219116333086610e27565b61082b8382611cf2565b6000948552600d602090815260408087206001600160a01b03909516875293905291909320555050565b60606001805461041190611c3d565b61086f338383610e5f565b5050565b61087d3383610b57565b6108995760405162461bcd60e51b815260040161052f90611ca4565b61066d84848484610f2d565b600c80546108b290611c3d565b80601f01602080910402602001604051908101604052809291908181526020018280546108de90611c3d565b801561092b5780601f106109005761010080835404028352916020019161092b565b820191906000526020600020905b81548152906001019060200180831161090e57829003601f168201915b505050505081565b60606103fc82610f60565b6009546001600160a01b031633146109825760405162461bcd60e51b8152602060048201526007602482015266666163746f727960c81b604482015260640161052f565b600061098d60085490565b905061099d600880546001019055565b6109a78382611068565b6105d081836111aa565b6109b9610d7b565b6001600160a01b038116610a1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052f565b6106ee81610dd5565b6000818152600260205260409020546001600160a01b03166106ee5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161052f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610abb826106f1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6040516001600160a01b0383166024820152604481018290526105d090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611244565b600080610b63836106f1565b9050806001600160a01b0316846001600160a01b03161480610baa57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610bce5750836001600160a01b0316610bc384610494565b6001600160a01b0316145b949350505050565b826001600160a01b0316610be9826106f1565b6001600160a01b031614610c4d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161052f565b6001600160a01b038216610caf5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161052f565b610cba600082610a86565b6001600160a01b0383166000908152600360205260408120805460019290610ce3908490611c8d565b90915550506001600160a01b0382166000908152600360205260408120805460019290610d11908490611cf2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6106ee81611316565b6007546001600160a01b031633146107e95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052f565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261066d9085906323b872dd60e01b90608401610b20565b816001600160a01b0316836001600160a01b031603610ec05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161052f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f38848484610bd6565b610f4484848484611356565b61066d5760405162461bcd60e51b815260040161052f90611d0a565b6060610f6b82610a27565b60008281526006602052604081208054610f8490611c3d565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb090611c3d565b8015610ffd5780601f10610fd257610100808354040283529160200191610ffd565b820191906000526020600020905b815481529060010190602001808311610fe057829003601f168201915b50505050509050600061101b60408051602081019091526000815290565b9050805160000361102d575092915050565b81511561105f578082604051602001611047929190611d5c565b60405160208183030381529060405292505050919050565b610bce84611457565b6001600160a01b0382166110be5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161052f565b6000818152600260205260409020546001600160a01b0316156111235760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161052f565b6001600160a01b038216600090815260036020526040812080546001929061114c908490611cf2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b03166112255760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161052f565b600082815260066020908152604090912082516105d0928401906117e0565b6000611299826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114cb9092919063ffffffff16565b8051909150156105d057808060200190518101906112b79190611d8b565b6105d05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052f565b61131f816114da565b6000818152600660205260409020805461133890611c3d565b1590506106ee5760008181526006602052604081206106ee91611864565b60006001600160a01b0384163b1561144c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061139a903390899088908890600401611da8565b6020604051808303816000875af19250505080156113d5575060408051601f3d908101601f191682019092526113d291810190611de5565b60015b611432573d808015611403576040519150601f19603f3d011682016040523d82523d6000602084013e611408565b606091505b50805160000361142a5760405162461bcd60e51b815260040161052f90611d0a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610bce565b506001949350505050565b606061146282610a27565b600061147960408051602081019091526000815290565b9050600081511161149957604051806020016040528060008152506114c4565b806114a384611575565b6040516020016114b4929190611d5c565b6040516020818303038152906040525b9392505050565b6060610bce8484600085611676565b60006114e5826106f1565b90506114f2600083610a86565b6001600160a01b038116600090815260036020526040812080546001929061151b908490611c8d565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60608160000361159c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156115c657806115b081611e02565b91506115bf9050600a83611e31565b91506115a0565b60008167ffffffffffffffff8111156115e1576115e1611aa9565b6040519080825280601f01601f19166020018201604052801561160b576020820181803683370190505b5090505b8415610bce57611620600183611c8d565b915061162d600a86611e45565b611638906030611cf2565b60f81b81838151811061164d5761164d611e59565b60200101906001600160f81b031916908160001a90535061166f600a86611e31565b945061160f565b6060824710156116d75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161052f565b6001600160a01b0385163b61172e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052f565b600080866001600160a01b0316858760405161174a9190611e6f565b60006040518083038185875af1925050503d8060008114611787576040519150601f19603f3d011682016040523d82523d6000602084013e61178c565b606091505b509150915061179c8282866117a7565b979650505050505050565b606083156117b65750816114c4565b8251156117c65782518084602001fd5b8160405162461bcd60e51b815260040161052f919061193a565b8280546117ec90611c3d565b90600052602060002090601f01602090048101928261180e5760008555611854565b82601f1061182757805160ff1916838001178555611854565b82800160010185558215611854579182015b82811115611854578251825591602001919060010190611839565b5061186092915061189a565b5090565b50805461187090611c3d565b6000825580601f10611880575050565b601f0160209004906000526020600020908101906106ee91905b5b80821115611860576000815560010161189b565b6001600160e01b0319811681146106ee57600080fd5b6000602082840312156118d757600080fd5b81356114c4816118af565b60005b838110156118fd5781810151838201526020016118e5565b8381111561066d5750506000910152565b600081518084526119268160208601602086016118e2565b601f01601f19169290920160200192915050565b6020815260006114c4602083018461190e565b60006020828403121561195f57600080fd5b5035919050565b80356001600160a01b038116811461197d57600080fd5b919050565b6000806040838503121561199557600080fd5b61199e83611966565b946020939093013593505050565b6000806000606084860312156119c157600080fd5b83359250602084013591506119d860408501611966565b90509250925092565b6000806000606084860312156119f657600080fd5b6119ff84611966565b9250611a0d60208501611966565b9150604084013590509250925092565b60008060408385031215611a3057600080fd5b82359150611a4060208401611966565b90509250929050565b600060208284031215611a5b57600080fd5b6114c482611966565b80151581146106ee57600080fd5b60008060408385031215611a8557600080fd5b611a8e83611966565b91506020830135611a9e81611a64565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611ada57611ada611aa9565b604051601f8501601f19908116603f01168101908282118183101715611b0257611b02611aa9565b81604052809350858152868686011115611b1b57600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215611b4b57600080fd5b611b5485611966565b9350611b6260208601611966565b925060408501359150606085013567ffffffffffffffff811115611b8557600080fd5b8501601f81018713611b9657600080fd5b611ba587823560208401611abf565b91505092959194509250565b60008060408385031215611bc457600080fd5b611bcd83611966565b9150602083013567ffffffffffffffff811115611be957600080fd5b8301601f81018513611bfa57600080fd5b611c0985823560208401611abf565b9150509250929050565b60008060408385031215611c2657600080fd5b611c2f83611966565b9150611a4060208401611966565b600181811c90821680611c5157607f821691505b602082108103611c7157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611c9f57611c9f611c77565b500390565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60008219821115611d0557611d05611c77565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611d6e8184602088016118e2565b835190830190611d828183602088016118e2565b01949350505050565b600060208284031215611d9d57600080fd5b81516114c481611a64565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ddb9083018461190e565b9695505050505050565b600060208284031215611df757600080fd5b81516114c4816118af565b600060018201611e1457611e14611c77565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611e4057611e40611e1b565b500490565b600082611e5457611e54611e1b565b500690565b634e487b7160e01b600052603260045260246000fd5b60008251611e818184602087016118e2565b919091019291505056fea264697066735822122077914b8b54e6334ecfb0910da8a42844f91385b0dc14a2214d1ea789b661ba0164736f6c634300080e0033a264697066735822122086164b0bfd1b0f3a0dd267f3a6936444ac85985962640cc245f370504bfe309964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3228,
        "contract": "src/WikiFactory.sol:WikiFactory",
        "label": "wikipages",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3232,
        "contract": "src/WikiFactory.sol:WikiFactory",
        "label": "isWikiAddr",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3236,
        "contract": "src/WikiFactory.sol:WikiFactory",
        "label": "getAddrByHash",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3238,
        "contract": "src/WikiFactory.sol:WikiFactory",
        "label": "baseToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3240,
        "contract": "src/WikiFactory.sol:WikiFactory",
        "label": "voting",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}